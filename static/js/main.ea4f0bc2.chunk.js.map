{"version":3,"sources":["components/TaskRow.js","components/TaskBanner.js","components/TaskCreator.js","components/VisibilityControl.js","App.js","reportWebVitals.js","index.js"],"names":["TaskRow","props","task","name","type","checked","done","onChange","toggleTask","TaskBanner","className","userName","taskItems","filter","t","length","TaskCreator","useState","newTaskName","setNewTaskName","style","display","value","e","target","onClick","callback","VisibilityControl","isChecked","htmlFor","description","App","setUserName","setTaskItems","showCompleted","setShowCompleted","useEffect","data","localStorage","getItem","JSON","parse","setItem","stringify","map","taskTableRows","doneValue","taskName","find","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea4f0bc2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const TaskRow = props => (\r\n    <tr key={props.task.name}>\r\n          <td>{props.task.name}</td>\r\n          <td>\r\n              <input \r\n                type=\"checkbox\" \r\n                checked={props.task.done} \r\n                onChange={() => props.toggleTask(props.task)} \r\n            />\r\n          </td>\r\n    </tr>\r\n);","import React from 'react';\r\n\r\nexport const TaskBanner = props => (\r\n    <h4 className=\"bg-primary text-white text-center p-4\">\r\n        {props.userName}'s Task App ({props.taskItems.filter(t => !t.done).length} Tareas por Realizar)\r\n    </h4>\r\n)","import React, { useState} from 'react';\r\n\r\nexport const TaskCreator = props => {\r\n\r\n    const [newTaskName, setNewTaskName] = useState('');\r\n\r\n    const updateNewTaskValue = e => setNewTaskName(e.target.value);\r\n\r\n    const createNewTask = () => {\r\n        props.callback(newTaskName);\r\n        setNewTaskName('');\r\n    };\r\n\r\n    return (\r\n        <div className=\"mt-1 mb-1\" style={{display:\"flex\"}}>\r\n            <div className=\"col-10\">\r\n            <input \r\n                type=\"text\"\r\n                className=\"form-control mt-1\"\r\n                value={newTaskName}\r\n                onChange={updateNewTaskValue}\r\n            />\r\n            </div>\r\n            <div className=\"col-2\">\r\n            <button className=\"btn btn-primary mt-1\" onClick={createNewTask}>\r\n                Add\r\n            </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const VisibilityControl = props => {\r\n    return (\r\n        <div className=\"form-check\">\r\n            <input \r\n                type=\"checkbox\"\r\n                className=\"form-check-input\"\r\n                checked={props.isChecked}\r\n                onChange={e => props.callback(e.target.checked)}\r\n            />\r\n\r\n            <label htmlFor=\"form-check-label\">\r\n                Show {props.description}\r\n            </label>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\nimport { TaskRow } from './components/TaskRow';\nimport { TaskBanner } from './components/TaskBanner';\nimport { TaskCreator } from './components/TaskCreator';\nimport { VisibilityControl } from \"./components/VisibilityControl\";\n\nfunction App() {\n\n  const [userName, setUserName] = useState('JoseL');\n  const [taskItems, setTaskItems] = useState([\n    { name: 'Task One', done: false },\n    { name: 'Task Two', done: false },\n    { name: 'Task Three', done: true },\n    { name: 'Task Four', done: false }\n  ])\n\n  const [showCompleted, setShowCompleted] = useState(true);\n\n  useEffect(() =>{\n    let data = localStorage.getItem('task');\n    if (data != null) {\n      setTaskItems(JSON.parse(data));\n    } else {\n      setUserName('JoseL Example')\n      setTaskItems([\n        { name: 'Task One Example', done: false },\n      { name: 'Task Two Example', done: false },\n      { name: 'Task Three Example', done: true },\n      { name: 'Task Four Example', done: false }\n      ])\n      setShowCompleted(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(taskItems));\n  }, [taskItems]);\n\n  const createNewTask = taskName => {\n    if (!taskItems.find(t => t.name === taskName)) {\n      setTaskItems([...taskItems, {name: taskName, done: false}])\n    }\n  }\n\n  const toggleTask = task =>\n    setTaskItems(taskItems.map(t => (t.name === task.name ? {...t, done: !t.done} : t )))\n\n  const taskTableRows = (doneValue) => \n    taskItems\n    .filter(task => task.done === doneValue)\n    .map(task => (\n      <TaskRow task={task} key={task.name} toggleTask={toggleTask} />\n  ))\n\n  return (\n    <div>\n      <TaskBanner userName={userName} taskItems={taskItems} />\n      <TaskCreator callback={createNewTask} />\n      <table className=\"table table-striped table-bordered\">\n        <thead>\n          <tr>\n            <th>Description</th>\n            <th>Done</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {taskTableRows(false)}\n        </tbody>\n      </table>\n\n      <div className=\"bg-secondary-text-white text-center p-2\">\n        <VisibilityControl\n          description=\"Completed Tasks\"\n          isChecked={showCompleted}\n          callback={checked => setShowCompleted(checked)}\n        />\n      </div>\n\n      {\n        showCompleted && (\n          <table className=\"table table-striped table-bordered\">\n            <thead>\n              <tr>\n                <th>Description</th>\n                <th>Done</th>\n              </tr>\n            </thead>\n            <tbody>\n              {taskTableRows(true)}\n            </tbody>\n          </table>\n        )\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}